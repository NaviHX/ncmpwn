use base64::engine::general_purpose::STANDARD;
use base64::Engine;
use serde::Deserialize;
use std::io::{Read, Seek, SeekFrom, Write};

pub mod error;
use error::{DumpResult, Error};

#[cfg(feature = "tag")]
mod tag;
#[cfg(feature = "tag")]
use tag::TagWrite;

#[cfg(feature = "tag")]
use audiotags::{AudioTagEdit, FlacTag, Id3v2Tag, Picture};

#[cfg(feature = "tag")]
use id3::Tag as ID3v2InnerTag;

#[cfg(feature = "tag")]
use metaflac::Tag as FlacInnerTag;

#[cfg(feature = "tag")]
use image;

#[deprecated]
#[allow(unused_macros)]
macro_rules! build_tag {
    ($tag:ident, $inner_tag:ident, $reader:ident) => {{
        let inner_tag = $inner_tag::read_from($reader)?;
        let tag: $tag = inner_tag.into();

        Ok(Box::new(tag) as Box<dyn AudioTag>)
    }};
}

macro_rules! write_tag {
    ($tag:ty, $inner_tag:ty, $reader:ident, $writer:ident, $info:ident, $cover:ident) => {{
        let inner_tag = <$inner_tag>::read_from($reader)?;
        let mut tag: $tag = inner_tag.into();
        tag.set_title(&($info).name);
        tag.set_artist(&construct_artist_list(&($info).artist));
        tag.set_album_title(&($info).album);
        tag.set_album_cover($cover);
        let mut inner_tag: $inner_tag = tag.into();
        inner_tag.write_with_tag_to($writer)?;

        Ok(())
    }};
}

pub struct NcmDump<R: Read> {
    reader: R,
    cursor: usize,
    key_box: Vec<u8>,
    info_range: (u64, u64),
    image_range: (u64, u64),
    data_start: u64,
}

#[derive(Debug, Deserialize, PartialEq, Eq)]
pub struct NcmInfo {
    #[serde(rename = "musicName")]
    pub name: String,

    #[serde(rename = "musicId")]
    pub id: u64,

    pub album: String,
    pub artist: Vec<(String, u64)>,
    pub bitrate: u64,
    pub duration: u64,
    pub format: String,

    #[serde(rename = "mvId")]
    pub mv_id: Option<u64>,

    pub alias: Option<Vec<String>>,
}

#[allow(non_camel_case_types)]
#[derive(Clone, Copy)]
pub enum MediaFormat {
    fLaC,
    ID3v2,

    Unsupported,
    Unknown,
}

impl From<&str> for MediaFormat {
    fn from(value: &str) -> Self {
        match value {
            "flac" => Self::fLaC,
            "mp3" => Self::ID3v2,

            _ => Self::Unsupported,
        }
    }
}

impl<R: Read + Seek> NcmDump<R> {
    pub fn from_reader(mut reader: R) -> DumpResult<Self> {
        let mut format_buf = [0u8; 10];
        let size = reader.read(&mut format_buf)?;
        if size != 10 || !check_format(&format_buf) {
            return Err(Error::FormatError);
        }

        let mut key_length_buf = [0u8; 4];
        let size = reader.read(&mut key_length_buf)?;
        if size != 4 {
            return Err(Error::KeyLengthError);
        }
        let key_length = u32::from_ne_bytes(key_length_buf) as usize;

        let mut key_buf: Vec<u8> = Vec::new();
        let size = reader
            .by_ref()
            .take(key_length as u64)
            .read_to_end(&mut key_buf)?;
        if size != key_length {
            return Err(Error::KeyLoadError);
        }
        let key_box: Vec<u8> = build_key_box_from_encrypted(&key_buf)?;

        let mut info_length_buf = [0u8; 4];
        let size = reader.read(&mut info_length_buf)?;
        if size != 4 {
            return Err(Error::InfoLengthError);
        }
        let info_length = u32::from_ne_bytes(info_length_buf);
        let info_start = reader.stream_position()?;
        let _info_end = info_start + info_length as u64;
        reader.seek(SeekFrom::Current(info_length as i64))?;

        // Skip the 9-byte gap
        reader.seek(SeekFrom::Current(9i64))?;

        let mut image_length_buf = [0u8; 4];
        let size = reader.read(&mut image_length_buf)?;
        if size != 4 {
            return Err(Error::ImageLengthError);
        }
        let image_length = u32::from_ne_bytes(image_length_buf);
        let image_start = reader.stream_position()?;
        let data_start = reader.seek(SeekFrom::Current(image_length as i64))?;

        Ok(Self {
            reader,
            cursor: 0,
            key_box,
            info_range: (info_start, info_length as u64),
            image_range: (image_start, image_length as u64),
            data_start,
        })
    }

    pub fn get_info(&mut self) -> DumpResult<NcmInfo> {
        let original_pos = self.reader.stream_position()?;

        self.reader.seek(SeekFrom::Start(self.info_range.0))?;
        let mut info_reader = self.reader.by_ref().take(self.info_range.1);
        let mut info_buf = vec![];
        let _ = info_reader.read_to_end(&mut info_buf)?;
        self.reader.seek(SeekFrom::Start(original_pos))?;

        let info_buf = &mut info_buf[22..];
        info_buf.iter_mut().for_each(|b| *b ^= 0x63);

        let info_buf = STANDARD
            .decode(info_buf)
            .map_err(|_| Error::InfoDecodeError)?;

        let info_buf = decrypt_meta(&info_buf, &INFO_KEY)?;
        let info_str =
            String::from_utf8(info_buf[6..].to_owned()).map_err(|_| Error::InfoDecodeError)?;

        serde_json::from_str(&info_str).map_err(|_| Error::InfoDecodeError)
    }

    pub fn get_image(&mut self) -> DumpResult<Vec<u8>> {
        let original_pos = self.reader.stream_position()?;

        self.reader.seek(SeekFrom::Start(self.image_range.0))?;
        let mut image_reader = self.reader.by_ref().take(self.image_range.1);
        let mut image_buf = vec![];
        let _ = image_reader.read_to_end(&mut image_buf)?;
        self.reader.seek(SeekFrom::Start(original_pos))?;

        Ok(image_buf)
    }

    pub fn move_to_start(&mut self) -> std::io::Result<()> {
        self.reader.seek(SeekFrom::Start(self.data_start))?;
        self.cursor = 0;
        Ok(())
    }

    pub fn write_to(&mut self, writer: &mut impl Write) -> DumpResult<()> {
        self.move_to_start()?;
        std::io::copy(self, writer)?;
        Ok(())
    }

    #[cfg(feature = "tag")]
    pub fn write_with_tag(&mut self, writer: &mut (impl Write + Seek)) -> DumpResult<()> {
        let info = self.get_info()?;
        let image = self.get_image()?;
        let image_format = image::guess_format(&image).map_err(|_| Error::ImageFormatError)?;
        let image_format = image_to_audiotag_mimetype(image_format)?;
        let cover = Picture::new(&image, image_format);
        self.move_to_start()?;

        let media_format: MediaFormat = info.format.as_str().into();
        match media_format {
            MediaFormat::ID3v2 => {
                let res: DumpResult<()> = unsafe {
                    let p = self as *mut Self;
                    let reader: &mut Self = &mut *p;
                    write_tag!(Id3v2Tag, ID3v2InnerTag, reader, writer, info, cover)
                };
                std::io::copy(self, writer)?;
                res
            }
            MediaFormat::fLaC => {
                let res: DumpResult<()> =
                    write_tag!(FlacTag, FlacInnerTag, self, writer, info, cover);
                std::io::copy(self, writer)?;
                res
            }
            _ => Err(Error::TagBuildError("Unsupported format".to_string())),
        }?;

        Ok(())
    }
}

fn construct_artist_list(artists: &[(String, u64)]) -> String {
    let artists: Vec<&str> = artists.iter().map(|(s, _)| s.as_str()).collect();
    artists.join(",")
}

const FORMAT: [u8; 8] = [b'C', b'T', b'E', b'N', b'F', b'D', b'A', b'M'];

fn check_format(format: &[u8]) -> bool {
    let real_format = format.split_at(8).0;
    real_format == FORMAT
}

const AES_KEY: [u8; 16] = [
    0x68, 0x7A, 0x48, 0x52, 0x41, 0x6D, 0x73, 0x6F, 0x35, 0x6B, 0x49, 0x6E, 0x62, 0x61, 0x78, 0x57,
];

const INFO_KEY: [u8; 16] = [
    0x23, 0x31, 0x34, 0x6C, 0x6A, 0x6B, 0x5F, 0x21, 0x5C, 0x5D, 0x26, 0x30, 0x55, 0x3C, 0x27, 0x28,
];

use aes::Aes128;
use cipher::{block_padding::Pkcs7, BlockDecryptMut, KeyInit};

fn build_key_box_from_encrypted(encrypted_key: &[u8]) -> DumpResult<Vec<u8>> {
    let mut buf = Vec::from(encrypted_key);
    buf.iter_mut().for_each(|b| *b ^= 0x64);
    let key = &decrypt_meta(&buf, &AES_KEY)?[17..];

    Ok(build_key_box(key))
}

fn decrypt_meta(encrypted: &[u8], key: &[u8]) -> DumpResult<Vec<u8>> {
    Aes128::new(key.into())
        .decrypt_padded_vec_mut::<Pkcs7>(encrypted)
        .map_err(|_| error::Error::KeyDecryptError)
}

const BOX_LEN: usize = 256;

fn build_key_box(key: &[u8]) -> Vec<u8> {
    let mut key_box = (0..BOX_LEN).map(|n| n as u8).collect::<Vec<u8>>();
    let mut last_byte = 0;
    let l = key.len();
    assert!(l > 0);
    assert!(key_box.len() == BOX_LEN);

    for (i, k) in key.iter().cycle().take(BOX_LEN).enumerate() {
        let c = key_box[i]
            .overflowing_add(last_byte)
            .0
            .overflowing_add(*k)
            .0;
        last_byte = c;
        key_box.swap(i, c as usize);
    }

    key_box
}

impl<R: Read> Read for NcmDump<R> {
    fn read(&mut self, buf: &mut [u8]) -> std::io::Result<usize> {
        let size = self.reader.read(buf)?;
        decrypt_data(buf, &self.key_box, self.cursor);
        self.cursor += size;
        Ok(size)
    }
}

fn decrypt_data(buf: &mut [u8], key_box: &[u8], offset: usize) {
    for (index, byte) in buf.iter_mut().enumerate() {
        let box_offset = (index + offset + 1) & 0xFF;
        let index_1 = key_box[box_offset];
        let index_2 = key_box[(key_box[box_offset] as usize + box_offset) & 0xFF];
        let key_index = index_1.overflowing_add(index_2).0;
        *byte ^= key_box[key_index as usize];
        // let j = ((offset + index + 1) & 0xff) as usize;
        // let key_index = (key_box[j].overflowing_add(key_box[(key_box[j] as usize + j) & 0xff]).0) & 0xff;
        // *byte ^= key_box[key_index as usize] as u8;
    }
}

impl<R: Read + Seek> Seek for NcmDump<R> {
    fn seek(&mut self, pos: SeekFrom) -> std::io::Result<u64> {
        let new_pos = self.reader.seek(pos)?;

        if new_pos < self.data_start {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidInput,
                "Seeked to NCM illegal area",
            ));
        }

        self.cursor = (new_pos - self.data_start) as usize;
        Ok(self.cursor as u64)
    }
}

fn image_to_audiotag_mimetype(image_mime: image::ImageFormat) -> DumpResult<audiotags::MimeType> {
    match image_mime {
        image::ImageFormat::Png => Ok(audiotags::MimeType::Png),
        image::ImageFormat::Jpeg => Ok(audiotags::MimeType::Jpeg),
        image::ImageFormat::Gif => Ok(audiotags::MimeType::Gif),
        image::ImageFormat::Tiff => Ok(audiotags::MimeType::Tiff),
        image::ImageFormat::Bmp => Ok(audiotags::MimeType::Bmp),
        _ => Err(Error::ImageUnsupportedError),
    }
}

#[cfg(test)]
mod test {
    use std::{fs::File, io::Read};

    use crate::ncmdump::{build_key_box, decrypt_meta};

    use super::{NcmDump, NcmInfo};

    #[test]
    fn test_build_from_ncm_file() {
        let reader = File::open("./tests/test.ncm").unwrap();
        let _ = NcmDump::from_reader(reader).unwrap();
    }

    #[test]
    fn test_build_keybox() {
        let key = [
            0x31, 0x31, 0x38, 0x31, 0x39, 0x38, 0x30, 0x33, 0x33, 0x32, 0x38, 0x35, 0x45, 0x37,
            0x66, 0x54, 0x34, 0x39, 0x78, 0x37, 0x64, 0x6F, 0x66, 0x39, 0x4F, 0x4B, 0x43, 0x67,
            0x67, 0x39, 0x63, 0x64, 0x76, 0x68, 0x45, 0x75, 0x65, 0x7A, 0x79, 0x33, 0x69, 0x5A,
            0x43, 0x4C, 0x31, 0x6E, 0x46, 0x76, 0x42, 0x46, 0x64, 0x31, 0x54, 0x34, 0x75, 0x53,
            0x6B, 0x74, 0x41, 0x4A, 0x4B, 0x6D, 0x77, 0x5A, 0x58, 0x73, 0x69, 0x6A, 0x50, 0x62,
            0x69, 0x6A, 0x6C, 0x69, 0x69, 0x6F, 0x6E, 0x56, 0x55, 0x58, 0x58, 0x67, 0x39, 0x70,
            0x6C, 0x54, 0x62, 0x58, 0x45, 0x63, 0x6C, 0x41, 0x45, 0x39, 0x4C, 0x62,
        ];
        let key_box = vec![
            0x43, 0x63, 0x9D, 0xE2, 0x5B, 0x4B, 0x55, 0xBB, 0x4C, 0xCF, 0x2A, 0x62, 0x0E, 0x48,
            0x8A, 0x15, 0x59, 0x52, 0xBA, 0x6C, 0xEF, 0x6D, 0x72, 0x39, 0xA0, 0x9A, 0xA9, 0x27,
            0x66, 0xBC, 0xF9, 0xC0, 0x47, 0xDF, 0x7D, 0xDE, 0x3B, 0x81, 0x04, 0xFF, 0x90, 0x77,
            0x80, 0x50, 0x54, 0xBD, 0x0D, 0x58, 0x34, 0x0A, 0x44, 0xA8, 0x5F, 0x99, 0xC6, 0xBE,
            0x4E, 0x4D, 0x13, 0x17, 0x83, 0x01, 0x35, 0x5C, 0xF4, 0x7B, 0x53, 0x31, 0x86, 0xD4,
            0xB8, 0xAB, 0xD1, 0xB5, 0x68, 0xDC, 0x96, 0xF1, 0x9C, 0xE8, 0x7A, 0x1B, 0xB0, 0x56,
            0x22, 0x1A, 0x51, 0x92, 0xBF, 0xFA, 0xB1, 0x19, 0x88, 0x26, 0x49, 0x08, 0xEB, 0xAC,
            0x14, 0x28, 0xAD, 0x3A, 0x8C, 0x85, 0x84, 0x2C, 0x82, 0xB3, 0xA6, 0xA2, 0xA3, 0x12,
            0x78, 0xA1, 0x57, 0xAE, 0x00, 0x2F, 0xB6, 0x61, 0xA5, 0x6F, 0x5A, 0x89, 0x29, 0x46,
            0x2E, 0x4F, 0x36, 0x40, 0x07, 0x87, 0xA7, 0x65, 0x73, 0xC4, 0x7C, 0x33, 0x1E, 0xE5,
            0x10, 0xB4, 0xFD, 0xC9, 0xE0, 0xB7, 0x97, 0x32, 0x5D, 0x64, 0x41, 0xF0, 0x20, 0xC3,
            0x95, 0xFE, 0xD2, 0x21, 0xFB, 0x75, 0x3D, 0x0B, 0x3E, 0xF2, 0xD5, 0xCB, 0xD6, 0xF7,
            0x1F, 0x24, 0x45, 0x69, 0xB9, 0xDA, 0x6A, 0x76, 0x03, 0xF8, 0x70, 0x8E, 0xC1, 0xC8,
            0xD7, 0x4A, 0xD0, 0x9E, 0xCD, 0xA4, 0xCE, 0xAA, 0x1D, 0xED, 0xF6, 0x02, 0x60, 0xE3,
            0xDB, 0x8D, 0x09, 0xF3, 0x37, 0xE1, 0xC5, 0xCA, 0x8F, 0x2D, 0x7F, 0x74, 0x42, 0x6E,
            0x8B, 0x3F, 0x23, 0xC2, 0xD3, 0xCC, 0xD9, 0xEE, 0x98, 0xE6, 0x11, 0x05, 0xEA, 0xD8,
            0xB2, 0xE4, 0xF5, 0xE7, 0x71, 0x2B, 0x93, 0x9B, 0x3C, 0x30, 0xE9, 0xC7, 0x38, 0xEC,
            0x18, 0x6B, 0x79, 0xFC, 0xAF, 0x5E, 0x9F, 0x7E, 0x91, 0xDD, 0x16, 0x94, 0x0F, 0x06,
            0x67, 0x25, 0x0C, 0x1C,
        ];
        assert_eq!(build_key_box(&key), key_box);
    }

    #[test]
    fn test_decrypt_key() {
        let key = [
            0x23, 0x31, 0x34, 0x6C, 0x6A, 0x6B, 0x5F, 0x21, 0x5C, 0x5D, 0x26, 0x30, 0x55, 0x3C,
            0x27, 0x28,
        ];
        let source = [
            0x2F, 0xAE, 0x05, 0x53, 0x75, 0xB8, 0x63, 0x15, 0xF7, 0x64, 0x54, 0xE6, 0x6D, 0x9F,
            0xBC, 0xFD, 0xD4, 0xC3, 0xE5, 0x4A, 0x5D, 0x7D, 0x61, 0x47, 0x93, 0x82, 0x00, 0xAC,
            0x48, 0xE4, 0x2C, 0x96, 0x43, 0x0F, 0x53, 0x54, 0xBE, 0x36, 0xC8, 0x6D, 0xE5, 0x46,
            0x47, 0x7E, 0x87, 0x88, 0xBC, 0xF6, 0x0F, 0x97, 0x0F, 0xA9, 0x60, 0xDB, 0xF7, 0x4C,
            0xD1, 0xD0, 0xD4, 0x44, 0xEC, 0xF6, 0x89, 0x44, 0x6B, 0x88, 0xD3, 0x2A, 0x39, 0x25,
            0xB8, 0x09, 0x71, 0xA9, 0x3F, 0xE0, 0xC1, 0x07, 0x22, 0x3A, 0xB6, 0x0B, 0xF0, 0xA1,
            0xB3, 0x26, 0x96, 0x62, 0xBD, 0x30, 0x76, 0xB5, 0xDA, 0x03, 0x6B, 0xB0, 0x99, 0x43,
            0x2E, 0x7B, 0x8F, 0xD4, 0xD2, 0x9E, 0xFF, 0x37, 0x24, 0xB5, 0x25, 0x56, 0x6A, 0x0B,
            0x2B, 0x41, 0x19, 0x52, 0xF6, 0xC8, 0x6E, 0x56, 0xE8, 0xC4, 0xF0, 0xCA, 0xFC, 0x9F,
            0x09, 0xA4, 0xED, 0x51, 0x94, 0x7E, 0xDD, 0xE4, 0xF1, 0x3D, 0x63, 0xEB, 0x7A, 0xBB,
            0x8C, 0xE6, 0x8F, 0x42, 0xDA, 0xE1, 0x7F, 0x17, 0xB5, 0x06, 0xC8, 0x34, 0x1C, 0xD7,
            0x4C, 0x7F, 0xBE, 0x7B, 0xE8, 0x66, 0xB1, 0x0C, 0xB6, 0x57, 0x65, 0x78, 0xCF, 0xD0,
            0xBA, 0xCC, 0x78, 0x09, 0xC1, 0x0F, 0x50, 0xDE, 0x1A, 0x2A, 0x27, 0x5D, 0x83, 0x12,
            0xBB, 0x3A, 0xA5, 0x12, 0xFB, 0x54, 0xA2, 0xC9, 0x4D, 0x15, 0x46, 0x9F, 0x36, 0x8D,
            0xF6, 0x79, 0x98, 0xA7, 0x34, 0x7F, 0x84, 0x6D, 0xD9, 0xC7, 0x3C, 0x51, 0xA6, 0x8B,
            0x95, 0x42, 0x09, 0x13, 0xA9, 0xAE, 0x2C, 0xE4, 0x5F, 0x8A, 0x26, 0x67, 0x3B, 0xF5,
            0x01, 0x36, 0x0D, 0x20, 0xD0, 0x2C, 0xDE, 0xA1, 0xE2, 0x03, 0x62, 0xD3, 0xB8, 0x9F,
            0x65, 0xE8, 0xD7, 0xC1, 0x05, 0x88, 0x83, 0x68, 0x50, 0xDB, 0xC7, 0x0F, 0xE5, 0x79,
            0xF7, 0x3F, 0x37, 0x4A, 0xF4, 0xD9, 0x82, 0xB1, 0xB3, 0x04, 0x0B, 0xB0, 0xD8, 0x5C,
            0xFA, 0x03, 0x9C, 0x63, 0xFF, 0xCA, 0xE2, 0xE4, 0x57, 0x08, 0x2A, 0x05, 0x34, 0x16,
            0x03, 0xED, 0xC7, 0x85, 0xE0, 0x3C, 0x43, 0x53, 0x78, 0x8C, 0x88, 0x7F, 0x52, 0xE6,
            0x94, 0x5D, 0xC7, 0x9A, 0x21, 0xD0, 0xEA, 0x89, 0x7B, 0x09, 0xB0, 0xDA, 0xA2, 0x0B,
            0xEE, 0xC2, 0x66, 0x04, 0x2A, 0xA0, 0x9C, 0x28, 0xDC, 0xA9, 0xB4, 0x71, 0x90, 0xC8,
            0x9B, 0x00, 0x7B, 0xF5, 0x7A, 0x9C, 0xAF, 0x2B, 0x8A, 0x7B, 0x0F, 0x70, 0x7F, 0x44,
            0x01, 0x5A, 0xDB, 0x6D, 0x8E, 0x98, 0x3D, 0x4E, 0x14, 0x71, 0xC1, 0xB2, 0x0F, 0x66,
            0x8F, 0x14, 0x0A, 0x5C, 0x78, 0xE9, 0x16, 0xD2, 0x45, 0x4F, 0x1F, 0xE3, 0x3F, 0x0E,
            0xBD, 0x5D, 0x40, 0x75,
        ];
        let target = [
            0x6D, 0x75, 0x73, 0x69, 0x63, 0x3A, 0x7B, 0x22, 0x6D, 0x75, 0x73, 0x69, 0x63, 0x49,
            0x64, 0x22, 0x3A, 0x31, 0x33, 0x30, 0x35, 0x33, 0x36, 0x36, 0x35, 0x35, 0x36, 0x2C,
            0x22, 0x6D, 0x75, 0x73, 0x69, 0x63, 0x4E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0xE5,
            0xAF, 0x92, 0xE9, 0xB8, 0xA6, 0xE5, 0xB0, 0x91, 0xE5, 0xB9, 0xB4, 0x22, 0x2C, 0x22,
            0x61, 0x6C, 0x69, 0x61, 0x73, 0x22, 0x3A, 0x5B, 0x22, 0xE7, 0x94, 0xB5, 0xE8, 0xA7,
            0x86, 0xE5, 0x89, 0xA7, 0xE3, 0x80, 0x8A, 0xE6, 0x96, 0x97, 0xE7, 0xA0, 0xB4, 0xE8,
            0x8B, 0x8D, 0xE7, 0xA9, 0xB9, 0xE3, 0x80, 0x8B, 0xE4, 0xB8, 0xBB, 0xE9, 0xA2, 0x98,
            0xE6, 0x9B, 0xB2, 0x22, 0x5D, 0x2C, 0x22, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22,
            0x3A, 0x5B, 0x5B, 0x22, 0xE5, 0x8D, 0x8E, 0xE6, 0x99, 0xA8, 0xE5, 0xAE, 0x87, 0x22,
            0x2C, 0x38, 0x36, 0x31, 0x37, 0x37, 0x37, 0x5D, 0x5D, 0x2C, 0x22, 0x61, 0x6C, 0x62,
            0x75, 0x6D, 0x49, 0x64, 0x22, 0x3A, 0x37, 0x32, 0x37, 0x30, 0x36, 0x37, 0x38, 0x38,
            0x2C, 0x22, 0x61, 0x6C, 0x62, 0x75, 0x6D, 0x22, 0x3A, 0x22, 0xE5, 0xAF, 0x92, 0xE9,
            0xB8, 0xA6, 0xE5, 0xB0, 0x91, 0xE5, 0xB9, 0xB4, 0x22, 0x2C, 0x22, 0x61, 0x6C, 0x62,
            0x75, 0x6D, 0x50, 0x69, 0x63, 0x44, 0x6F, 0x63, 0x49, 0x64, 0x22, 0x3A, 0x31, 0x30,
            0x39, 0x39, 0x35, 0x31, 0x31, 0x36, 0x33, 0x35, 0x32, 0x30, 0x36, 0x33, 0x38, 0x35,
            0x32, 0x32, 0x2C, 0x22, 0x61, 0x6C, 0x62, 0x75, 0x6D, 0x50, 0x69, 0x63, 0x22, 0x3A,
            0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x70, 0x33, 0x2E, 0x6D, 0x75, 0x73,
            0x69, 0x63, 0x2E, 0x31, 0x32, 0x36, 0x2E, 0x6E, 0x65, 0x74, 0x2F, 0x71, 0x52, 0x51,
            0x54, 0x53, 0x5F, 0x54, 0x72, 0x6F, 0x5A, 0x6F, 0x39, 0x53, 0x4C, 0x56, 0x35, 0x79,
            0x71, 0x70, 0x54, 0x35, 0x41, 0x3D, 0x3D, 0x2F, 0x31, 0x30, 0x39, 0x39, 0x35, 0x31,
            0x31, 0x36, 0x33, 0x35, 0x32, 0x30, 0x36, 0x33, 0x38, 0x35, 0x32, 0x32, 0x2E, 0x6A,
            0x70, 0x67, 0x22, 0x2C, 0x22, 0x6D, 0x76, 0x49, 0x64, 0x22, 0x3A, 0x30, 0x2C, 0x22,
            0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3A, 0x39, 0x32, 0x33, 0x33, 0x37,
            0x38, 0x2C, 0x22, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x22, 0x3A, 0x33,
            0x31, 0x35, 0x31, 0x34, 0x36, 0x2C, 0x22, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x22,
            0x3A, 0x22, 0x66, 0x6C, 0x61, 0x63, 0x22, 0x7D,
        ];
        let result = decrypt_meta(&source, &key).unwrap();
        assert_eq!(&result[..], &target);
    }

    #[test]
    fn test_decrypt_file() {
        let reader = File::open("./tests/test.ncm").unwrap();
        let mut dump = NcmDump::from_reader(reader).unwrap();

        let mut data: Vec<u8> = vec![];
        let size = dump.read_to_end(&mut data).unwrap();

        assert_eq!(size, 61440);
        assert_eq!(
            data[0..16],
            [
                0x66, 0x4c, 0x61, 0x43, 0x00, 0x00, 0x00, 0x22, 0x12, 0x00, 0x12, 0x00, 0x00, 0x01,
                0x01, 0x00,
            ]
        );
        assert_eq!(
            data[61424..],
            [
                0x8b, 0x25, 0x88, 0x08, 0x4b, 0x49, 0x89, 0xc2, 0xba, 0xe3, 0xda, 0x88, 0x48, 0xc1,
                0x09, 0x7b,
            ]
        );
    }

    #[test]
    fn test_get_info() {
        let reader = File::open("./tests/test.ncm").unwrap();
        let mut dump = NcmDump::from_reader(reader).unwrap();

        let info = dump.get_info().unwrap();
        assert_eq!(
            info,
            NcmInfo {
                name: "寒鸦少年".to_string(),
                id: 1305366556,
                album: "寒鸦少年".to_string(),
                artist: vec![("华晨宇".into(), 861777)],
                bitrate: 923378,
                duration: 315146,
                format: "flac".to_string(),
                mv_id: Some(0),
                alias: Some(vec!["电视剧《斗破苍穹》主题曲".into()]),
            },
        )
    }

    #[test]
    fn test_get_image() {
        let mut dump = NcmDump::from_reader(File::open("./tests/test.ncm").unwrap()).unwrap();

        let image = dump.get_image().unwrap();
        assert_eq!(image.len(), 39009);
        assert_eq!(
            image[..16],
            [
                0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01,
                0x00, 0x48,
            ],
        );
        assert_eq!(
            image[38993..],
            [
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0xff, 0xd9,
            ],
        );
    }

    #[test]
    fn test_write_with_tag() {
        let mut dump = NcmDump::from_reader(File::open("./tests/test.ncm").unwrap()).unwrap();
        let mut writer = File::options()
            .create(true)
            .write(true)
            .open("./tests/test.flac")
            .unwrap();
        dump.write_to(&mut writer).unwrap();

        let mut dump = NcmDump::from_reader(File::open("./tests/sample.ncm").unwrap()).unwrap();
        let mut writer = File::options()
            .create(true)
            .write(true)
            .open("./tests/sample.flac")
            .unwrap();
        dump.write_with_tag(&mut writer).unwrap();
    }
}
