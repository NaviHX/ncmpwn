use crate::MediaFormat;
use std::io::{Read, Seek};

const KEY: [u8; 256] = [
    0x77, 0x48, 0x32, 0x73, 0xDE, 0xF2, 0xC0, 0xC8, 0x95, 0xEC, 0x30, 0xB2, 0x51, 0xC3, 0xE1, 0xA0,
    0x9E, 0xE6, 0x9D, 0xCF, 0xFA, 0x7F, 0x14, 0xD1, 0xCE, 0xB8, 0xDC, 0xC3, 0x4A, 0x67, 0x93, 0xD6,
    0x28, 0xC2, 0x91, 0x70, 0xCA, 0x8D, 0xA2, 0xA4, 0xF0, 0x08, 0x61, 0x90, 0x7E, 0x6F, 0xA2, 0xE0,
    0xEB, 0xAE, 0x3E, 0xB6, 0x67, 0xC7, 0x92, 0xF4, 0x91, 0xB5, 0xF6, 0x6C, 0x5E, 0x84, 0x40, 0xF7,
    0xF3, 0x1B, 0x02, 0x7F, 0xD5, 0xAB, 0x41, 0x89, 0x28, 0xF4, 0x25, 0xCC, 0x52, 0x11, 0xAD, 0x43,
    0x68, 0xA6, 0x41, 0x8B, 0x84, 0xB5, 0xFF, 0x2C, 0x92, 0x4A, 0x26, 0xD8, 0x47, 0x6A, 0x7C, 0x95,
    0x61, 0xCC, 0xE6, 0xCB, 0xBB, 0x3F, 0x47, 0x58, 0x89, 0x75, 0xC3, 0x75, 0xA1, 0xD9, 0xAF, 0xCC,
    0x08, 0x73, 0x17, 0xDC, 0xAA, 0x9A, 0xA2, 0x16, 0x41, 0xD8, 0xA2, 0x06, 0xC6, 0x8B, 0xFC, 0x66,
    0x34, 0x9F, 0xCF, 0x18, 0x23, 0xA0, 0x0A, 0x74, 0xE7, 0x2B, 0x27, 0x70, 0x92, 0xE9, 0xAF, 0x37,
    0xE6, 0x8C, 0xA7, 0xBC, 0x62, 0x65, 0x9C, 0xC2, 0x08, 0xC9, 0x88, 0xB3, 0xF3, 0x43, 0xAC, 0x74,
    0x2C, 0x0F, 0xD4, 0xAF, 0xA1, 0xC3, 0x01, 0x64, 0x95, 0x4E, 0x48, 0x9F, 0xF4, 0x35, 0x78, 0x95,
    0x7A, 0x39, 0xD6, 0x6A, 0xA0, 0x6D, 0x40, 0xE8, 0x4F, 0xA8, 0xEF, 0x11, 0x1D, 0xF3, 0x1B, 0x3F,
    0x3F, 0x07, 0xDD, 0x6F, 0x5B, 0x19, 0x30, 0x19, 0xFB, 0xEF, 0x0E, 0x37, 0xF0, 0x0E, 0xCD, 0x16,
    0x49, 0xFE, 0x53, 0x47, 0x13, 0x1A, 0xBD, 0xA4, 0xF1, 0x40, 0x19, 0x60, 0x0E, 0xED, 0x68, 0x09,
    0x06, 0x5F, 0x4D, 0xCF, 0x3D, 0x1A, 0xFE, 0x20, 0x77, 0xE4, 0xD9, 0xDA, 0xF9, 0xA4, 0x2B, 0x76,
    0x1C, 0x71, 0xDB, 0x00, 0xBC, 0xFD, 0x0C, 0x6C, 0xA5, 0x47, 0xF7, 0xF6, 0x00, 0x79, 0x4A, 0x11,
];

fn get_mask(offset: usize, keybox: &[u8]) -> u8 {
    assert_eq!(keybox.len(), 256);
    let index = if offset > 0x7FFF {
        offset % 0x7FFF
    } else {
        offset
    };
    let index = (index * index + 80923) & 0xFF;
    keybox[index]
}

pub struct QmcDump<R: Read> {
    reader: R,
    cursor: usize,
    format: MediaFormat,
}

impl<R: Read> QmcDump<R> {
    pub fn from_reader(reader: R) -> Self {
        Self {
            reader,
            cursor: 0usize,
            format: MediaFormat::Unknown,
        }
    }

    pub fn from_reader_with_format(reader: R, format: MediaFormat) -> Self {
        Self {
            reader,
            cursor: 0usize,
            format,
        }
    }
}

impl<R: Read> Read for QmcDump<R> {
    fn read(&mut self, buf: &mut [u8]) -> std::io::Result<usize> {
        let size = self.reader.read(buf)?;
        for (index, byte) in buf.iter_mut().enumerate().take(size) {
            let mask = get_mask(self.cursor + index, &KEY);
            *byte ^= mask;
        }
        self.cursor += size;
        Ok(size)
    }
}

impl<R: Read + Seek> Seek for QmcDump<R> {
    fn seek(&mut self, pos: std::io::SeekFrom) -> std::io::Result<u64> {
        let p = self.reader.seek(pos)?;
        self.cursor = p as usize;
        Ok(p)
    }
}

impl<R: Read + Seek> QmcDump<R> {
    pub fn set_format(&mut self, format: MediaFormat) {
        self.format = format;
    }

    pub fn get_format(&self) -> MediaFormat {
        self.format
    }
}

#[cfg(test)]
mod test {
    use crate::qmcdump::{get_mask, KEY};
    use std::io::{Cursor, Read, Seek, SeekFrom};

    use super::QmcDump;

    #[test]
    fn test_mask() {
        assert_eq!(get_mask(0x99, &KEY), 146);
        assert_eq!(get_mask(0x1000, &KEY), 195);
        assert_eq!(get_mask(0x8FFF, &KEY), 195);
    }

    #[test]
    fn test_decrypt() {
        let output: [u8; 4] = [0xC3, 0x4B, 0xD4, 0xC9];
        let input: [u8; 4] = [0, 1, 2, 3];
        let input = Cursor::new(input);
        let mut dump = QmcDump::from_reader(input);
        let mut res: [u8; 4] = [0; 4];

        let size = dump.read(&mut res).unwrap();
        assert_eq!(size, 4);
        assert_eq!(res, output);
    }

    #[test]
    fn test_decrypt_flac_header() {
        // fLaC
        let input: [u8; 4] = [0xA5, 0x06, 0xB7, 0x89];
        let input = Cursor::new(input);
        let output: [u8; 4] = [0x66, 0x4C, 0x61, 0x43];
        let mut res = [0u8; 4];
        let mut dump = QmcDump::from_reader(input);
        let size = dump.read(&mut res).unwrap();
        assert_eq!(size, 4);
        assert_eq!(res, output);
    }

    #[test]
    fn test_decrypt_id3_header() {
        // ID3
        let input: [u8; 3] = [0x8A, 0x0E, 0xE5];
        let input = Cursor::new(input);
        let output: [u8; 3] = [0x49, 0x44, 0x33];
        let mut res = [0u8; 3];
        let mut dump = QmcDump::from_reader(input);
        let size = dump.read(&mut res).unwrap();
        assert_eq!(size, 3);
        assert_eq!(res, output);
    }

    #[test]
    fn test_seek() {
        let output: [u8; 4] = [0xC3, 0x4B, 0xD4, 0xC9];
        let input: [u8; 4] = [0, 1, 2, 3];
        let input = Cursor::new(input);
        let mut dump = QmcDump::from_reader(input);
        let mut res: [u8; 4] = [0; 4];

        let size = dump.read(&mut res).unwrap();
        assert_eq!(size, 4);
        assert_eq!(res, output);

        dump.seek(SeekFrom::Start(0)).unwrap();
        let mut res: [u8; 4] = [0; 4];

        let size = dump.read(&mut res).unwrap();
        assert_eq!(size, 4);
        assert_eq!(res, output);
    }
}
